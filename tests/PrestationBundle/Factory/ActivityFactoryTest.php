<?php
/**
 * Created by PhpStorm.
 * User: versus
 * Date: 20/01/18
 * Time: 17:30
 */

namespace Tests\PrestationBundle\Factory;

use PHPUnit\Framework\TestCase;
use PrestationBundle\Entity\Activity;
use PrestationBundle\Factory\ActivityFactory;
use PrestationBundle\Manager\ActivityManager;
use ProductBundle\Factory\WorkshopFactory;
use Tests\Framework\WebTestCase;


class ActivityFactoryTest extends WebTestCase
{
    const NAME_WASH = 'car wash';
    const NAME_POLISH = 'car polish';
    const NAME_SALON = 'salon';
    const NAME_MUSIC_SYSTEM = 'Music System';
    const PRICE_15 = 15;
    const PRICE_45 = 45;
    const PRICE_230 = 230;
    const PRICE_300 = 300;

    private $factory;

    private $worshopFactory;

    private $manager;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->factory = new ActivityFactory();
        $this->worshopFactory = new WorkshopFactory();
        $this->manager = new ActivityManager($this->container, $this->factory);
    }

    /**
     * @dataProvider createFromSpecification
     * @test
     * @param $name
     * @param $category
     * @param $price
     */
    public function createActivityFromSpecification($name, $category, $price)
    {

        $activity = $this->factory->createfromSpecification($name, $category, $price);

        switch ($category)
        {
            case ActivityFactory::ESTHETIC :
                $this->assertEquals('esthetic', $activity->getCategory());
                break;

            case ActivityFactory::MAINTENANCE :
                $this->assertEquals('maintenance', $activity->getCategory());
                break;

            case ActivityFactory::CUSTOMIZING :
                $this->assertEquals('customizing', $activity->getCategory());
                break;
        }

        $this->assertTrue(is_string($name));
        $this->assertTrue(is_integer($price));
    }


    public function createFromSpecification()
    {
        return [
            // $name, $category, $price
            [self::NAME_POLISH, Activity::CATEGORY_MAINTENANCE, self::PRICE_45],
            [self::NAME_SALON,Activity::CATEGORY_ESTHETIC, self::PRICE_230],
            [self::NAME_MUSIC_SYSTEM, Activity::CATEGORY_CUSTOM, self::PRICE_300],
        ];
    }

    /**
     * @test
     */
    public function couldNotAssignHimAWorkshopThatAlreadyHasAWorkshop()
    {
        /** @var  $activity */
        $activity = $this->factory->createfromSpecification(self::NAME_WASH, Activity::CATEGORY_CUSTOM, self::PRICE_15);
        $this->saveEntity($activity);
        $activity = $this->retrieveSavedActivitiesByName([self::NAME_WASH]);

        /** @var  $workshop */
        $workshop = $this->worshopFactory->createSmallWorkshop('venus', $activity, true);
        $this->saveEntity($workshop);
        $workshop = $this->retrieveSavedWorkshopsByName(['venus']);

        $activity->setWorkshop($workshop);
        $this->saveEntity($activity);

        $workshop2 = $this->worshopFactory->createSmallWorkshop('second stuff', $activity, true);

        $activity->setWorkshop($workshop);

        $this->assertEquals(self::NAME_WASH, $activity->getName());
        $this->assertEquals('venus', $workshop->getName());

    }

    /**
     * @test
     */
    public function canReplaceAWorkshopByAnotherOne()
    {
        /** @var  $activity */
        $activity = $this->factory->createfromSpecification(self::NAME_WASH, Activity::CATEGORY_CUSTOM, self::PRICE_15);
        $this->saveEntity($activity);
        $activity = $this->retrieveSavedActivitiesByName([self::NAME_WASH]);

        /** @var  $workshop */
        $workshop = $this->worshopFactory->createSmallWorkshop('venus', $activity, true);
        $this->saveEntity($workshop);
        $workshop = $this->retrieveSavedWorkshopsByName(['venus']);

        $activity->setWorkshop($workshop);
        $this->saveEntity($activity);

        $workshop2 = $this->worshopFactory->createSmallWorkshop('second stuff', $activity, true);

        $activity->replaceWorkshop($workshop2);

        $this->assertEquals(self::NAME_WASH, $activity->getName());
        $this->assertEquals('second stuff', $workshop2->getName()); // a tester la methode


    }

}