<?php
/**
 * Created by PhpStorm.
 * User: versus
 * Date: 29/01/18
 * Time: 14:15
 */

namespace tests\ProductBundle\Controller\Api;


use CoreBundle\Test\ApiTestCase;
use Doctrine\ORM\EntityManager;
use ProductBundle\Entity\Workshop;
use ProductBundle\Factory\WorkshopFactory;
use UserBundle\Entity\Developer;
use UserBundle\Entity\User;
use UserBundle\Factory\UserFactory;


class WorkshopControllerTest extends ApiTestCase
{
    const NAME_AFRICA = 'afric-corp';
    const NAME_FOUNDER = 'workshop-founder';


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function Post()
    {
        $name = self::NAME_FOUNDER;
        $data = array(
            'name' => $name,
            'activity' => null,
            'capacity' => \ProductBundle\Entity\Workshop::SMALL,
            'isAvailable' => true
        );

            // POST to create a workshop
            $response = $this->client->post('/api/workshops', [
                'body' => json_encode($data)
            ]);
            $body = $response->getBody();

        $this->assertEquals(201, $response->getStatusCode());
        $this->assertTrue($response->hasHeader('Location'));
        $finishedData = json_decode($response->getBody(true), true);
        $this->assertEquals('/api/workshops/'. $finishedData['id'], $response->getHeader('Location')[0]);
        $this->assertEquals($name, $finishedData['name']);

    }

    protected function createUser($username, $plainPassword = 'foo')
    {
        /** @var UserFactory $userFactory */
        $userFactory = new UserFactory();
        /** @var Developer $user */
        $user = $userFactory->createUser(User::TYPE_DEVELOPER);
        $user->setUsername($username);
        $user->setEmail($username.'@foo.com');
        $password = $this->getService('security.password_encoder')
            ->encodePassword($user, $plainPassword);
        $user->setPassword($password);

        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();

        return $user;
    }

    /**
     * @return EntityManager
     */
    protected function getEntityManager()
    {
        return $this->getService('doctrine.orm.entity_manager');
    }

    /**
     * @test
     */
    public function GetWorkshop()
    {
        $data = array(
            'name' => self::NAME_AFRICA,
            'activity' => null,
            'capacity' => \ProductBundle\Entity\Workshop::LARGE,
            'isAvailable' => true
        );
        $workshop = $this->createWorkshop($data);
        var_dump($workshop);
        $id = $workshop->getId() ;

        $response = $this->client->get('/api/workshops/' . $workshop->getId() );
        //$this->visit('/api/workshops/'. $workshop->getName());
        $this->assertEquals(200, $response->getStatusCode());

        $finishedData = json_decode($response->getBody()->getContents(), true);
        $this->assertEquals(self::NAME_AFRICA, $finishedData['name']);
        var_dump( $finishedData);
        //$array = json_decode($this->responseContent, true); // :'(
        //var_dump($array[0]['$finishedData']);
    }

    /**
     *
     */
    public function GetWorkshopsCollection()
    {
        $this->createVenusOregonMarsWorkshops();

        $response = $this->client->get('/api/workshops');
        self::assertEquals(200, $response->getStatusCode());

        $finishedData = json_decode($response->getBody(true), true);
        var_dump($finishedData);
    }

}